os: linux
language: shell

stages:
  - name: Terraform run
  - name: Perform tests
  - name: Prepare artifact

services:
  - docker

install:
  - sudo apt-add-repository "deb http://archive.ubuntu.com/ubuntu trusty-backports main restricted universe multiverse"
  - sudo apt-get -qq update
  - sudo apt-get -t trusty-backports install shellcheck
  - sudo pip install awscli  
  - curl -sLo /tmp/terraform.zip https://releases.hashicorp.com/terraform/0.12.5/terraform_0.12.5_linux_amd64.zip
  - unzip /tmp/terraform.zip -d /tmp
  - mv /tmp/terraform ~/bin
  - export PATH="~/bin:$PATH"

jobs:
  include:
    - stage: Terraform run
      env:
        - TF_INPUT=false # No interraction
      script:
        - cd provision
        - echo "Feeding main.tf with variables."
        - sed -i -e "s/ALEXASKILLID/${alexa_skill_id}/g" main.tf_template
        - mv main.tf_template main.tf
        - echo "Feeding terraform.tf with variables."
        - sed -i -e "s/STATEBUCKETNAME/${terraform_bucket}/g" terraform.tf_template
        - sed -i -e "s/TABLENAME/${terraform_table}/g" terraform.tf_template
        - sed -i -e "s/REGION/${terraform_region}/g" terraform.tf_template
        - mv terraform.tf_template terraform.tf
        - echo "Feeding terraform.tfvars with variables."
        - sed -i -e "s/REGION/${terraform_region}/g" terraform.tfvars_template
        - sed -i -e "s/TABLENAME/${terraform_table}/g" terraform.tfvars_template
        - sed -i -e "s/STATEBUCKETNAME/${terraform_bucket}/g" terraform.tfvars_template
        - sed -i -e "s/ARTIFACTBUCKETNAME/${artifact_bucket}/g" terraform.tfvars_template
        - sed -i -e "s/ENVIRONMENT/${terraform_environment}/g" terraform.tfvars_template
        - sed -i -e "s/CONTEXTTABLE/${dynamodb_context}/g" terraform.tfvars_template
        - mv terraform.tfvars_template terraform.tfvars
        - terraform init
        - terraform validate
        - chmod +x execute.sh
        - ./execute.sh

    - stage: Perform tests
      script:
        - echo "Check for commit ${TRAVIS_COMMIT} and tag ${TRAVIS_TAG} from branch ${TRAVIS_BRANCH}."
        - echo "This is build number ${TRAVIS_BUILD_NUMBER}, for ${TRAVIS_REPO_SLUG}."
        - mkdir /tmp/config-custom
        - docker pull almerhor/pylint:default
        - docker run --rm -v $(pwd):/pylint -v $(pwd)/test:/tmp/config-custom almerhor/pylint:default py/AirlyAlexaMainFunction.py requirements-custom.txt

    - stage: Perform tests
      os: linux
      language: java
      sudo: required
      addons:
        sonarcloud:
          organization: "alexa-airly"
          token: 
            secure: "ql5Exbz16Z3E8Q/SYnMZrC/UDCnFcXm8RCPI81OeUVgetzPDdGoxJLUBA0jz2VlRgrnVet3Q9NRXnTMeVBxFRVuSrWHo+1/ycf1+98IFcHYGMAdL6EAEbEvNuSkseuGqzwi3eoDP1f6aB9ekwRdYdpiI4LKswMGpAKOxlv5dsm6okiSEfyV/lM4LCHEDSwB0v6q1thY2Cy1Yp4uOXSG+FEfjWodty+v7dNCgVDhIL2Yto+7xSkVAkacXInTvQ0AeqatRIZYYow4Qcxc5rHFO/y2vUIBfvupq6ZasGzynbXWjnlA/eGdl7HZ+692zHpR47OrzU/IWaenYy/eK9VMMzenS8uPkofyWIq82vz4DwG+PdU1URoryso5lP33qy+/VtopdtBDwYzFAMa7E3UDN2n4T3G+HsS7aN1ys4Wgi5HqYotrxm4HSuVp2R/4H4pWCOhVDq/zt4+hkWjmltAlDZXEJ3ZQzra5bJ8Nj1NxrXuK/jZ4x7HxRqAPmFudH2Z5vo/DNBRgfzdsAK+Kr9Po4MIH90i0Nmlsljdt3c7OTtBBKs29R2Kv3SgqF7DsySuIGxLNCccj/Ipp8nqSbGQMYnQfKFWHQ9b9HfgpFqUkLvjPcGyXVz+aLnslQcaoxbmMgXOK0uXHzsOZtFsuq5sMgX51yswlotqLDx4SdQDfQZdY="
      
      jdk:
        - oraclejdk14

      script:
        - sudo chmod +x $(which sonar-scanner)
        - export PATH=$(dirname $(which sonar-scanner)):$PATH
        - sonar-scanner

    - stage: Prepare artifact
      os: linux
      language: python
      python:
        - "3.6"
      script:
        - echo "Building package"
        - cd artifact/scripts
        - chmod +x *.sh
        - ./env_prep.sh
        - cd ../..
        - unzip -l artifact/package/AirlyAlexaMainFunction.zip
        - echo "Send artifact to S3"
      deploy:
        - provider: s3
          bucket: "${artifact_bucket}"
          local_dir: artifact/package
          skip_cleanup: true
        - provider: lambda
          funtion_name: "Alexa-Airly-Main-Function"
          region: "${terraform_region}"
          role: "arn:aws:iam::${account_number}:role/alexaairly/LambdaAlexaAirlyMainFunctionIamRole"
          runtime: "python3.6"
          module_name: "AirlyAlexaMainFunction"
          handler_name: "handler"
          description: "Alexa Airly - Main Function"
          memory_size: 128
          timeout: 5
          zip: artifact/package/AirlyAlexaMainFunction.zip
          environment: 
            - LAMBDA_APIKEY="${airly_apikey}"
            - LAMBDA_MAXRESULTS=1
